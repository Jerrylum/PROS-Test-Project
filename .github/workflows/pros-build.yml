name: Build Template

on:
  push:
    branches: "**"
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches: "**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Build information
        id: build-info
        run: |
          # Use tee to write to the output file and stdout
          version_core=$(awk -F'=' '/^VERSION:=/{print $2}' Makefile)
          library_name=$(awk -F'=' '/^LIBNAME:=/{print $2}' Makefile)

          # If a new tag is pushed
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Remove the 'v' prefix from the tag version
            tag_version="${GITHUB_REF#refs/tags/v}"
            # Check if version_core is the same as tag_version; if not, fail
            if [[ "${version_core}" != "${tag_version}" ]]; then
              echo "The version in the Makefile does not match the pushed tag version: ${version_core} != ${tag_version}"
              exit 1
            fi

            # Set the version to the version core without the 'v' prefix and the build identifier
            version=${version_core}
          else
            # Obtain build identifier by head SHA if it is not empty; otherwise, use $GITHUB_SHA
            # $GITHUB_SHA might be the merge commit SHA, which is not preferred
            # See: https://stackoverflow.com/questions/68061051/get-commit-sha-in-github-actions
            # This should also work for forked pull requests
            if [[ -n "${{ github.event.pull_request.head.sha }}" ]]; then
              SHA="${{ github.event.pull_request.head.sha }}"
            else
              SHA="${GITHUB_SHA}"
            fi
            build_id=${SHA:0:6}

            # Set the version to the tag version plus the build identifier
            version="${version_core}+${build_id}"
          fi

          echo "version_core=${version_core}" >> $GITHUB_OUTPUT
          echo "library_name=${library_name}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
